---
import Layout from "../layouts/Layout.astro";
import { useEffect, useState } from "react";
---

<Layout title="Probabilidad - Proyecto">
  <main>
    <div class="relative my-6 flex justify-start items-center">
      <a href="/">
        <svg
          class="w-6 h-6 text-gray-800 dark:text-white"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          fill="none"
          viewBox="0 0 24 24"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M5 12h14M5 12l4-4m-4 4 4 4"></path>
        </svg>
      </a>
      <h1 class="ml-2 pl-4 text-4xl font-bold" transition:persist="fade">
        Proyecto de Probabilidad <a class="text-gradient">21 Blackjack</a>
      </h1>
    </div>

    <div class="justify-center">
      <section class="justify-center text-center text-sm ">
        <h2 class="text-center justify-center my-6">Tus cartas</h2>
        <div id="player-cards-container" class="flex grid-cols-3 justify-center gap-3 my-8">
          <img
            class="max-w-full h-48 object-cover"
            src="https://deckofcardsapi.com/static/img/back.png"
            alt=""
          />
          <img
            class="max-w-full h-48"
            src="https://deckofcardsapi.com/static/img/back.png"
            alt=""
          />
        </div>
      </section>
      <section class="justify-center text-center text-sm ">
        <h2 class="text-center justify-center my-6">Cartas del dealer</h2>
        <div id="dealer-cards-container" class="flex grid-cols-3 justify-center gap-3">
          <img
            class="max-w-full h-48 space-x-4"
            src="https://deckofcardsapi.com/static/img/back.png"
            alt=""
          />
          <img
            class="max-w-full h-48"
            src="https://deckofcardsapi.com/static/img/back.png"
            alt=""
          />
        </div>
      </section>
    </div>

    <br />
    <section class="flex justify-center grid-flow-col">
      <div class="grid grid-cols-2 gap-2 md:grid-cols-4">
        <button
          type="button"
          class="text-gray-900 bg-gradient-to-r from-teal-200 to-lime-200 hover:bg-gradient-to-l hover:from-teal-200 hover:to-lime-200 focus:ring-4 focus:outline-none focus:ring-lime-200 dark:focus:ring-teal-700 font-extrabold rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2"
          >Tomar Carta</button
        >
        <button
          type="button"
          class="text-gray-900 bg-gradient-to-r from-teal-200 to-lime-200 hover:bg-gradient-to-l hover:from-teal-200 hover:to-lime-200 focus:ring-4 focus:outline-none focus:ring-lime-200 dark:focus:ring-teal-700 font-extrabold rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2"
          >Quedarse</button
        >
        <button
          type="button"
          class="text-gray-900 bg-gradient-to-r from-teal-200 to-lime-200 hover:bg-gradient-to-l hover:from-teal-200 hover:to-lime-200 focus:ring-4 focus:outline-none focus:ring-lime-200 dark:focus:ring-teal-700 font-extrabold rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2"
          >Pedir Carta</button
        >
        <button
          id="draw-cards"
          type="button"
          class="text-gray-900 bg-gradient-to-r from-teal-200 to-lime-200 hover:bg-gradient-to-l hover:from-teal-200 hover:to-lime-200 focus:ring-4 focus:outline-none focus:ring-lime-200 dark:focus:ring-teal-700 font-extrabold rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2"
          >Repartir Cartas</button
        >
      </div>
    </section>

    <p id="resultado"></p>
    <br />
    <section
      class="flex flex-col space-y-4 justify-center px-4 sm:px-6 lg:px-8"
    >
      <h2 class="pb-6 font-semibold text-3xl">Estadisticas</h2>

      <a
        href="#"
        class="block w-full p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-900 dark:border-gray-700 dark:hover:bg-gray-700"
      >
        <h5
          class="mb-2 text-xl font-bold tracking-tight text-gray-900 dark:text-white"
        >
          Probabilidad de Blackjack en un saque
        </h5>
        <p class="font-normal text-gray-700 dark:text-gray-400">
          La probabilidad de obtener 21 en el primer saque es de aproximadamente <strong
            class="font-extrabold">4.8%</strong
          >.
        </p>
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
          <strong>Cálculo:</strong>
          La probabilidad de sacar un As primero es <code>4/52</code>, y la de
          sacar una carta de valor 10 después es <code>16/51</code>.
          Alternativamente, la probabilidad de sacar un 10 primero es <code
            >16/52</code
          >, y luego un As es <code>4/51</code>.
        </p>
      </a>

      <a
        href="#"
        class="block w-full p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-900 dark:border-gray-700 dark:hover:bg-gray-700"
      >
        <h5
          class="mb-2 text-xl font-bold tracking-tight text-gray-900 dark:text-white"
        >
          Probabilidad de fallo
        </h5>

        <p class="font-normal text-gray-700 dark:text-gray-400">
          - Pasarse de 21: --%
        </p>
        <p class="font-normal text-gray-700 dark:text-gray-400">
          - El dealer gana: --%
        </p>
        <p class="font-normal text-gray-700 dark:text-gray-400">
          - Empate: --%
        </p>
      </a>

      <a
        href="#"
        class="block w-full p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-900 dark:border-gray-700 dark:hover:bg-gray-700"
      >
        <h5
          class="mb-2 text-xl font-bold tracking-tight text-gray-900 dark:text-white"
        >
          Stats Actuales
        </h5>
        <p id="player-score" class="font-normal text-gray-700 dark:text-gray-400">
          (10, J, Q, K) como la primera carta: --%
        </p>
        <p id="dealer-score" class="font-normal text-gray-700 dark:text-gray-400">
          (10, J, Q, K) como la primera carta: --%
        </p>
        <p id="final-result" class="font-normal text-gray-700 dark:text-gray-400">
          (10, J, Q, K) como la primera carta: --%
        </p>
      </a>
    </section>

    <script>
      document.getElementById("draw-cards").addEventListener("click", () => {
        // Paso 1: Crear un nuevo mazo y barajar
        fetch("https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1")
          .then((response) => response.json())
          .then((deck) => {
            // Paso 2: Sacar dos cartas para el jugador y dos para el dealer
            return fetch(
              `https://deckofcardsapi.com/api/deck/${deck.deck_id}/draw/?count=4`
            );
          })
          .then((response) => response.json())
          .then((data) => {
            // Separar las cartas entre jugador y dealer
            const playerCards = data.cards.slice(0, 2); // Primeras dos cartas para el jugador
            const dealerCards = data.cards.slice(2, 4); // Últimas dos cartas para el dealer
            const playerScore = calcularValorMano(playerCards);
            const dealerScore = calcularValorMano(dealerCards);

            // Mostrar cartas del jugador
            mostrarCartas(playerCards, "player-cards-container");

            // Mostrar cartas del dealer
            mostrarCartas(dealerCards, "dealer-cards-container");
            document.getElementById("player-score").textContent = `Puntuación del Jugador: ${playerScore}`;
            document.getElementById("dealer-score").textContent = `Puntuación del Dealer: ${dealerScore}`;
            document.getElementById("final-result").textContent = `Resultados: ${evaluarResultados(playerScore, dealerScore)}`;
            evaluarResultados(playerScore, dealerScore);
          })
          .catch((error) => console.error("Error:", error));
      });

      // Función para mostrar cartas en un contenedor específico
      function mostrarCartas(cartas, contenedorId) {
        const cardsContainer = document.getElementById(contenedorId);
        cardsContainer.innerHTML = ""; // Limpiar el contenedor de cartas

        // Mostrar cada carta extraída
        cartas.forEach((card) => {
          // Crear un contenedor para la carta y su valor
          const cardElement = document.createElement("div");
          cardElement.className = "card";

          // Crear y mostrar la imagen de la carta
          const img = document.createElement("img");
          img.src = card.image;
          img.alt = `${card.value} of ${card.suit}`;
          img.style.width = "138.19px";
          img.style.height = "192px";

          // Crear y mostrar el valor de la carta
          const value = document.createElement("p");
          value.textContent = `${card.value} de ${card.suit}`;
          cardElement.appendChild(img);
          cardElement.appendChild(value);

          cardsContainer.appendChild(cardElement);
        });
      }
      function calcularValorMano(cartas) {
        let valor = 0;
        let ases = 0;

        cartas.forEach((carta) => {
            if (['JACK', 'QUEEN', 'KING'].includes(carta.value)) {
                valor += 10;
            } else if (carta.value === 'ACE') {
                valor += 11;
                ases += 1;
            } else {
                valor += parseInt(carta.value);
            }
        });

        // Ajustar el valor de los Ases de 11 a 1 si el valor total supera 21
        while (valor > 21 && ases > 0) {
            valor -= 10;
            ases -= 1;
        }

        return valor;
      }

      // Función para evaluar resultados básicos entre el jugador y el dealer
      function evaluarResultados(playerScore, dealerScore) {
          if (playerScore > 21) {
            const resultado = "El jugador se ha pasado de 21. ¡El dealer gana!";
              return resultado;
          } else if (dealerScore > 21) {
            const resultado = "El dealer se ha pasado de 21. ¡El jugador gana!";
              return resultado;
          } else if (playerScore > dealerScore) {
            const resultado = "El jugador va ganando.";
              return resultado;
          } else if (dealerScore > playerScore) {
            const resultado = "El dealer va ganando.";
              return resultado;
          } else {
            const resultado = "Es un empate.";
              return resultado;
          }
      }
    </script>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem 1rem;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 16px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  /* src/styles/Deck.css */
  .deck {
    border: 1px solid #ddd;
    padding: 10px;
    width: 200px;
  }

  .cards {
    margin-top: 10px;
  }

  .card {
    border: 1px solid #ccc;
    padding: 5px;
    margin-bottom: 5px;
    background: #f9f9f9;
  }
</style>
