---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import { useEffect, useState } from "react";
---

<Layout title="Probabilidad - Proyecto">
  <main>
    <h1 transition:persist="fade">Proyecto de Probabilidad <a href="/" class="text-gradient">Moneda</a></h1>
    <ul role="list" class="link-card-grid"></ul>
    
    <div class="coin-flip">
      <!-- Contenedor para la animación de la moneda -->
      <div class="coin" id="coin">
        <img src="/dolar.png" alt="Moneda" id="monedaImg" class="coin-img">
      </div>
      
      <label for="numLanzamientos">Número de lanzamientos:</label>
      <input type="number" id="numLanzamientos" min="1" value="1" />
      <button id="lanzarMonedaBtn"
        type="button"
        class="bg-gradient-to-r from-teal-200 to-lime-200 hover:bg-gradient-to-l hover:from-teal-200 hover:to-lime-200 focus:ring-4 focus:outline-none focus:ring-lime-200 dark:focus:ring-teal-700 font-extrabold rounded-lg text-lg px-6 py-3 text-center me-2 mb-2"
        style="color: #000000;">
        Lanzar Moneda
      </button>
      
      <div id="resultado-container">
		<div id="resultado"></div>

	  </div>

	  
  </main>


  <section
      class="flex flex-col space-y-4 justify-center px-4 sm:px-6 lg:px-8"
    >
	<h2 class="pb-6 font-semibold text-3xl" style="color: white;">Estadísticas</h2>


      <a
        href="#"
        class="block w-full p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-900 dark:border-gray-700 dark:hover:bg-gray-700"
      >
        <h5
          class="mb-2 text-xl font-bold tracking-tight text-gray-900 dark:text-white">
		  
          Probabilidad de Lanzamieno de Moneda       </h5>
        <p class="font-normal text-gray-700 dark:text-gray-400">
          La probabilidad de obtener cara o cruz en el primer lanzamiento es de <strong
            class="font-extrabold">50% para cada una </strong
          >.
        </p>
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
          <strong>Cálculo:</strong>
          Hay una posibilidad de que salga cara o cruz , al haber dos posibles resultados (CARA O CRUZ) y cada uno tiene la misma probabilidad entonces la probabilidad de cada uno es 1/2 o 50% 
        </p>
      </a>
</Layout>

<script>
	if (typeof window !== 'undefined') {
	  document.addEventListener('DOMContentLoaded', () => {
		const lanzarMonedaBtn = document.getElementById('lanzarMonedaBtn');
		const numLanzamientosInput = document.getElementById('numLanzamientos');
		const resultadoDiv = document.getElementById('resultado');
		const monedaImg = document.getElementById('monedaImg');
  
		if (!lanzarMonedaBtn || !numLanzamientosInput || !resultadoDiv || !monedaImg) {
		  console.error('Uno de los elementos necesarios no está disponible.');
		  return;
		}
  
		lanzarMonedaBtn.addEventListener('click', () => {
		  const numLanzamientos = parseInt(numLanzamientosInput.value, 10);
  
		  if (isNaN(numLanzamientos) || numLanzamientos <= 0) {
			resultadoDiv.innerHTML = `<p>Por favor ingresa un número válido de lanzamientos.</p>`;
			return;
		  }
  
		  let resultados = {};
  
		  // Generar todas las combinaciones posibles de resultados (caras y cruces)
		  const generarCombinaciones = (n) => {
			if (n === 1) return ['C', 'X'];
			const prevCombinaciones = generarCombinaciones(n - 1);
			const nuevasCombinaciones = [];
			prevCombinaciones.forEach(combinacion => {
			  nuevasCombinaciones.push('C' + combinacion);
			  nuevasCombinaciones.push('X' + combinacion);
			});
			return nuevasCombinaciones;
		  };
  
		  const combinaciones = generarCombinaciones(numLanzamientos);
  
		  // Calcular la probabilidad de cada combinación
		  combinaciones.forEach(combinacion => {
			let caras = 0;
			let cruces = 0;
			for (let i = 0; i < combinacion.length; i++) {
			  if (combinacion[i] === 'C') caras++;
			  else cruces++;
			}
			const probabilidad = Math.pow(0.5, numLanzamientos) * 100;
			const descripcion = `Caras: ${caras}, Cruces: ${cruces}`;
			resultados[descripcion] = (resultados[descripcion] || 0) + probabilidad;
		  });
  
		  // Limitar el número de resultados mostrados
		  const maxResultados = 10; // Ajusta el número de resultados según tus necesidades
		  const resultadosArray = Object.entries(resultados).slice(0, maxResultados);
  
		  const fragment = document.createDocumentFragment();
		  resultadosArray.forEach(([descripcion, probabilidad]) => {
			const probabilidadNumerica = probabilidad as number;
			const resultadoCaja = document.createElement('div');
			resultadoCaja.classList.add('resultado-caja');
			resultadoCaja.innerHTML = `<p>${descripcion} - Probabilidad: ${probabilidadNumerica.toFixed(2)}%</p>`;
			fragment.appendChild(resultadoCaja);
		  });
  
		  resultadoDiv.innerHTML = ''; // Limpiar el contenido anterior
		  resultadoDiv.appendChild(fragment);
  
		  // Activar la animación de la moneda
		  monedaImg.classList.add('moneda-girando');
  
		  // Retirar la animación después de que se complete para permitir nuevas animaciones en futuros clicks
		  setTimeout(() => {
			monedaImg.classList.remove('moneda-girando');
		  }, 1000); // La duración de la animación debe coincidir con la definida en el CSS
		});
	  });
	}
  </script>
  
  
<style>
	/* Estilo general */
main {
  margin: auto;
  padding: 1rem 1rem;
  width: 100%; /* Ancho completo en móviles */
  max-width: 800px;
  color: white;
  font-size: 20px;
  line-height: 1.6;
}

/* Título principal */
h1 {
  font-size: 2.5rem; /* Tamaño más pequeño en móviles */
  font-weight: 700;
  line-height: 1;
  text-align: center;
  margin-bottom: 0.5em;
  margin-top: 1em;
}

/* Coin Flip Container */
.coin-flip {
  text-align: center;
  margin: 2rem 0;
  color: white;
}

/* Contenedor de la moneda */
.coin {
  margin-bottom: 10px;
  display: flex;
  align-items: center;
  justify-content: center; /* Asegura que la moneda esté centrada horizontalmente */
}

/* Imagen de la moneda */
.coin-img {
  width: 150px; /* Reduce el tamaño en pantallas más pequeñas */
  height: 150px;
  display: block;
  margin: 0 auto;
  margin-bottom: 20px; /* Ajusta el margen inferior */
}

/* Contenedor de resultados */
#resultado {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

#resultado-container {
  max-height: 400px;
  overflow-y: auto;
  padding: 1rem;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: rgba(0, 0, 0, 0.7);
}

.resultado-caja {
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 1rem;
  border-radius: 8px;
  width: 100%; /* Ocupa todo el ancho disponible */
  text-align: center;
  margin-bottom: 1rem;
}

/* Estilos de input */
input {
  margin: 0 1rem;
  padding: 0.5rem;
  font-size: 1rem;
  background-color: #ffffff;
  color: rgb(0, 0, 0);
  border: 1px solid #0070f3;
  border-radius: 4px;
  width: calc(100% - 4rem); /* Ajusta el ancho en pantallas pequeñas */
}

/* Botones */
button {
  padding: 0.5rem 1rem;
  background-color: #0070f3;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  width: 100%; /* Ocupa todo el ancho disponible */
  margin-top: 1rem; /* Añade margen superior */
}

button:hover {
  background-color: #005bb5;
}

/* Animación de la moneda */
.moneda-girando {
  animation: girarMoneda 1s ease-in-out forwards;
}

@keyframes girarMoneda {
  0% { transform: rotateY(0deg); }
  50% { transform: rotateY(180deg); }
  100% { transform: rotateY(380deg); }
}

/* Estilos para pantallas pequeñas */
@media (max-width: 768px) {
  h1 {
    font-size: 2rem; /* Reduce el tamaño del título en pantallas pequeñas */
  }

  .coin-img {
    width: 120px; /* Tamaño más pequeño para la imagen de la moneda */
    height: 120px;
  }

  input, button {
    width: 100%; /* Asegura que el input y el botón ocupen todo el ancho en móviles */
    margin: 0.5rem 0; /* Ajusta el margen en pantallas pequeñas */
  }

  .resultado-caja {
    width: 90%; /* Reduce el ancho de los resultados */
  }
}
